v <- c(1,2,3,4)
print(class(v))
v1 <- c(1L,2L,3L)
print(class(v1))
v2 <- c("Hello","World")
print(class(v2))
v3 <- c(TRUE,FALSE,TRUE)
print(class(v3))
v4 <- c(2+3i,4+6i)
print(class(v4))
v5 <- 'Hello'
print(charToRaw(v5))    #We write class for showing the datatype
oi <- c(1.2L,2+3i,TRUE,"Hello World")
print(oi)
class(oi)
Student_Records <- data.frame(
name = c("Vinayak","Sahil","Kil"),
age = c(45,78,63),
phone = c(1234657987,1324659877,4645789134),
address = c("Malad","Goregaon","Andheri")
)
print(Student_Records)
Student_Records$age[2] <- NA
print(Student_Records$age[2])
print(Student_Records)
Student_Records <- data.frame(
name = c("Vinayak","Sahil","Kil"),
age = c(45,78,63),
phone = c(1234657987,1324659877,4645789134),
address = c("Malad","Goregaon","Andheri")
)
print(Student_Records)
print(Student_Records$name[2])
Student_Records$name[2] <- "Dilip"
Student_Records$name[2] = "Dilip"
print(Student_Records$name[2])
Student_Records <- data.frame(
name = c("Vinayak","Sahil","Kil"),
age = c(45,78,63),
phone = c(1234657987,1324659877,4645789134),
address = c("Malad","Goregaon","Andheri")
)
print(Student_Records)
install.packages("party")
library(party)
library(party)
install.packages("openxlsx")
library(openxlsx)
install.packages("rjava")
install.packages("rJava")
install.packages("class")
library(class)
install.packages("gmodels")
library(gmodels)
install.packages("ISLR")
library(ISLR)
install.packages("neuralnet")
library(neuralnet)
install.packages("dplyr")
install.packages("DBI")
library(DBI)
install.packages("caTools")
library(caTools)
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("rMySql")
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("rJava")
v1 <- c(145,245)
print(gcd(v1))
gcd <- function(a, b)
{
a=as.integer(a)
b=as.integer(b)
stopifnot(!(a==0 && b==0))
if ( a == 0 )
return(b)
if ( b == 0 )
return(a)
return(abs(gcd(b, a-b*floor(a/b))))
}
lcm <- function(a, b)
{
a=as.integer(a)
b=as.integer(b)
return(abs(a*b)/gcd(a,b))
}
23,43
32343
install.package("arules")
install.package(arules)
install.package('arules')
v <- c(1,2,3,4)
print(class(v))
v1 <- c(1L,2L,3L)
print(class(v1))
v2 <- c("Hello","World")
print(class(v2))
v3 <- c(TRUE,FALSE,TRUE)
print(class(v3))
v4 <- c(2+3i,4+6i)
print(class(v4))
v5 <- 'Hello'
print(charToRaw(v5))    #We write class for showing the datatype
oi <- c(1.2L,2+3i,TRUE,"Hello World")
print(oi)
class(oi)
print(oi[2])  #In R Index always starts with 1
oi[2] <- 9+5i
print(oi[2])
oi[2] <- NA
print(oi[2])
list1 <- list(c(24,35,32),21.35,cos)
print(list1)
print(list1[[2]])
class(list1)
print(list1[[1]][2])
list1[[1]][2] <- 38
print(list1[[1]][2])
list1[[1]][2] <- NA
print(list1[[1]][2])
matrix1 = matrix(c('b','c','d','e','f','g'),nrow = 2 , ncol = 3 ,byrow = TRUE)
print(matrix1)
#If False is  given then column wise fromat is given
# nrow x ncol = total numer of vectors(ELEMENTS)
matrix2 = matrix(c('b','c','d','e'),nrow = 2 , ncol = 3 ,byrow = TRUE)
print(matrix2)
print(matrix1[2,2])
matrix1[2,2] <- 7
print(matrix1[2,2])
matrix1[2,2] <- NA
print(matrix1[2,2])
matrix1 = matrix(c('b','c','d','e','f','g'),nrow = 2 , ncol = 3 ,byrow = FALSE)
print(matrix1)
print(matrix1[2,2])
matrix1[2,2] <- 7
print(matrix1[2,2])
matrix1[2,2] <- NA
print(matrix1[2,2])
matrix1 = matrix(c('b','c','d','e','f','g'),nrow = 2 , ncol = 3 ,byrow = TRUE)
print(matrix1)
print(matrix1[2,2])
matrix1[2,2] <- 7
print(matrix1)
a <- array(c('red','pink'),dim = c(3,3,2))
print(a)
b <- factor(c('red','pink','yellow','red','red','pink'))
print(b)
print(nlevels(b))
b[3] <- 'red'
print(b[3])
b[3] <- 'purple'
print(b[3])
b[3] <- NA
print(b[3])
BMI <- data.frame(
gender = c("FEMALE","FEMALE","MALE"),
height = c(153,172.5,170),
weight = c(90,92,70),
age = c(28,83,62)
)
print(BMI)
print(BMI$gender[2])
print(v)
cat("Number is ",v)
paste("Number is",v)
var_x <- "Hello SCTPL"
cat("The class of var_x is ",class(var_x),"\n")
print(ls())
print(ls(pattern = "var"))
print(ls(all.name = TRUE))
rm(var_x)
rm(list = ls())
v <- c( 2,5.5,6)
t <- c(3, 3, 4)
print(v^t)
v <- c( 2,5.5,6)
t <- c(8, 3, 4)
print(v/t)
print(v%%t)
print(v%/%t)
v <- c(3,0,TRUE,2+2i)
t <- c(4,0,FALSE,2+3i)
print(v|t)
x <- as.integer(readline(prompt = "Enter case"))
"first",
"second",
"third"
)
print(y)
x <- as.integer(readline(prompt = "Enter case"))
x <- as.integer(readline(prompt = "Enter case"))
"first",
"second",f
"third"
)
print(y)
x <- as.integer(readline(prompt = "Enter case"))
"first",
"second",f,
"third"
)
x <- as.integer(readline(prompt = "Enter case"))
"first",
"second",
"third"
)
print(y)
x <- as.integer(readline(prompt = "Enter case"))
y <- switch(  x,
"first",
"second",
"third"
)
print(y)
y <- switch(  x,
"first",
"second",
"third"
)
x <- as.integer(readline(prompt = "Enter case"))
y <- switch(  x,
"first",
"second",
"third"
)
print(y)
y <- switch(  4,
"first",
"second",
"third"
)
print(y)
x <- as.integer(readline(prompt = "Enter case"))
y <- switch(  x,
"first",
"second",
"third"
)
print(y)
x <- c("what","is","truth")
if("Truth" %in% x) {
print("Truth is found the first time")
} else if ("truth" %in% x) {
print("truth is found the second time")
} else {
print("No truth found")
}
x <- c("what","is","truth")
if("Truth" in x) {
print("Truth is found the first time")
} #else if ("truth" %in% x) {
# print("truth is found the second time")} else {
print("No truth found")
}
v <- c("Hello","loop")
cnt <- 2
repeat {
print(v)
cnt <- cnt +1
if(cnt > 5) {
break
}
}
v <- LETTERS[1:4]
for ( i in v) {
print(i)
}
v <- LETTERS[1:6]
for ( i in v) {
if (i == "D") {
next
}
print(i)
}
v <- LETTERS[1:6]
for ( i in v) {
if (i == "T") {
next
}
print(i)
}
v <- LETTERS[1:6]
for ( i in v) {
if (v == "T") {
next
}
print(i)
}
v <- LETTERS[1:6]
print(v)
source('~/R/day2.R')
setwd("/home/vinayak/Downloads/R Projects/iris_Dataset")
##Importing the Iris Dataset
iris_data <- read.csv("iris.csv",stringsAsFactors = FALSE)
print(iris_data)
##Performing Exploratory Data Analysis (EDA)
##Print first 3 Records from Dataset
head(iris_data,3)
##Dimension of Dataset
dim(iris_data)
##Names , Class of features in the Dataset
names(iris_data)
class(iris_data)
##Removing Missing values (if any) & make the data consistent by removing it
is.na(iris_data)
na.omit(iris_data)
##Structure of Data
str(iris_data)
##Mean, Median, Quartile, Max, Min data for every feature
summary(iris_data)
View(iris_data)
##Plot a Boxplot Graph, Pie chart respective to their Species
png(file = "pie1.png")
pie(table(iris_data$species),labels = c("Setosa","Versicolor","Virginica") )
dev.off()
library("ggplot2")
png(file = "boxplot.png")
boxplot(iris$Sepal.Length~iris$Species)
boxplot(iris$Sepal.Length~iris$Species,xlab="Species",ylab="Sepal Length",main="Species Information")
dev.off()
##Subset tuples based on their Species in different R-Object
sl <- subset(iris_data,sepal_length == 4:8)
species <- subset(iris_data,sepal_lenght=sl)
print(species$sepal_length)
sw <- subset(iris_data,sepal_width == 2:4.4)
species <- subset(iris_data,sepal_length=sw)
print(species$sepal_width)
pl <- subset(iris_data,petal_length == 1:6.9)
species <- subset(iris_data,petal_length=pl)
print(species$petal_length)
pw <- subset(iris_data,petal_width == 0.1:2.5)
species <- subset(iris_data,petal_width=pw)
print(species$petal_width)
ss <- subset(iris_data,species == character())
species <- subset(iris_data,species=ss)
print(species$species)
##Plot a BoxPlot Graph for Individual R-Object
png(file="boxplot2.png")
box <- ggplot(data=iris_data, aes(x=species, y=sepal_length)) +
geom_boxplot(aes(fill=species)) +  ylab("Sepal Length") +  ggtitle("Iris Boxplot") +
stat_summary(fun.y=mean, geom="point", shape=5, size=4)
dev.off()
##Histogram on feature Petal lengths of iris dataset
png(file="histo1.png")
hist(iris_data$petal_length,xlab = "length",col="blue",border="green")
dev.off()
png(file="histo2.png")
ggplot(iris_data, aes(species, petal_length, fill=species)) +
geom_boxplot()+
scale_y_continuous("Petal Length (cm)", breaks= seq(0,30, by=.5))+
labs(title = "Iris Petal Length Box Plot", x = "Species")
dev.off()
cov(iris_data, use="complete.obs")
is.data.frame(iris_data)
iris12 <- as.numeric(iris_data)
cov(iris12, use="complete.obs")
corr <- cor(iris_data[,1:4])
round(corr,3)
is.data.frame(mtcars)
corr <- cor(iris_data[,1:4])
round(corr,3)
png(file = "scatterplot1.png")
pairs(iris_data[,1:4])
dev.off()
library(rpart)
library(rattle)
library(rattle)
install.packages(rattle)
install.packages("rattle")
library(rattle)
library(rpart.plot)
input.dat <- iris_data
print(input.dat)
library(rpart)
install.packages("rattle")
library(rattle)
library(rpart.plot)
png(file ="decisiontree2.png")
input.dat <- iris_data
print(input.dat)
fm = species ~ sepal_length + sepal_width + petal_length + petal_width
fit <- rpart(formula = fm,input.dat,method = 'class')
rpart.plot(fit)
dev.off()
install.packages("rattle")
library(rpart)
library(rattle)
library(rpart.plot)
png(file ="decisiontree2.png")
input.dat <- iris_data
print(input.dat)
fm = species ~ sepal_length + sepal_width + petal_length + petal_width
fit <- rpart(formula = fm,input.dat,method = 'class')
rpart.plot(fit)
dev.off()
library(rpart)
library(rattle)
library(rpart.plot)
png(file ="decisiontree2.png")
input.dat <- iris_data
print(input.dat)
fm = species ~ sepal_length + sepal_width + petal_length + petal_width
fit <- rpart(formula = fm,input.dat,method = 'class')
fancyRpartPlot(fit)
dev.off()
